1004
利用Father[ID_i] = ID记忆结点之间的父子关系，再统计level

1020
postorder and inorder -> level order后序中序输出层序
1.solve(int PreL, int InL, int PostL, int L, int index)递归得到前序并记录index
2.利用完全二叉树存储index，利用index的大小进行排序输出

1043
Input:preorder 中左右
1.preorder的特点，左边界为根节点，右边界为最大值
2.void PostOrder(int s, int e)//s为根节点、e为最大的结点(这棵树的起始和结束结点)
3.从左右两边逼近i=s,j=e，i++,j--;
while (i <= e && pre[s] > pre[i]) i++;//满足比根节点小就递增
while (j > s && pre[s] <= pre[j]) j--;//满足比根节点大就递减
若满足当pre[i]>pre[j]时i-j==1满足完全二叉搜索树
例：  8   pre[4]=10>pre[3]=7满足条件
   6   10
  5 7 8 11

//树状数组
1057 Stack
树状数组，方便求sum和进行修改；时间复杂度均为O(logN)
本题的核心在于求第k = (s.size() + 1) / 2大的数。查询小于等于x的数的个数是否等于k
1.int c[maxn]树状数组，每个结点代表其子树结点出现的次数
2.#define lowbit(i) ((i)&(-i))//取最低位的1
3.void update(int x, int v)//单点修改(v代表出现了x的次数)
{
	for (int i = x;i < maxn;i += lowbit(i)) {
		c[i] += v;//顺着树向上爬
	}
}
int getsum(int x)//区域查询,小于等于x的数的个数
{
	int sum = 0;
	for (int i = x;i >= 1;i -= lowbit(i)) {
		sum += c[i];
	}
	return sum;
}
void PeekMedian() //二分法
{
	int left = 1, right = maxn, mid;//Key保证>0
	int k = (s.size() + 1) / 2;//代表要求的第k大小的数
	while (left < right) {
		mid = (left + right) / 2;
		if (getsum(mid) >= k)//小于等于mid的数的个数大于k个
			right = mid;
		else
			left = mid + 1;
	}
	printf("%d\n", left);
}

//1064 Complete Binary Search Tree
BST -> level order traversal
排序后的BST相当于中序遍历
利用BST的性质，判断左子树的长度，得到根节点的值
层序遍历：
tree[root]=node[L+Leftlength];
Levelorder(L, L + Leftlength - 1, 2*root+1);//左子树
Levelorder(L + Leftlength + 1,R, 2*root+2);//右子树

//AVL树（平衡二叉树）
利用定义实现，LL,RR旋转

1086 Tree Traversals Again 
栈和遍历之间的关系：
PUSH：preorder
POP: inorder
利用前序和中序遍历solve后序

1099 Build A Binary Search Tree
inorder中序遍历填值，因为是BST树满足左边小右边大，因此将key排序后就可以填值
void inOrder(int root)//中序遍历填值
{
	if (root == -1) return;
	inOrder(T[root].left); //-1也要插入
	T[root].data = key[num++];
	inOrder(T[root].right);
}

1110 Complete Binary Tree
我的方法：BFS遍历，若一个结点存在左/右子树且之前已经有结点没有左/右子树，说明不是完全二叉树
柳神方法：DFS遍历找到最大index下标，对比结点数

1115 Counting Nodes in a Binary Search Tree
求一个二叉搜索树最后两层的结点
1.建树
struct Node
{
	int data;
	PNode left, right;
};

PNode Build(PNode root, int data)
{
	if (root == NULL) {
		root = new Node();
		root->data = data;
		root->left = root->right = NULL;
	}
	else if (data <= root->data)
		root->left = Build(root->left, data);
	else
		root->right = Build(root->right, data);
	return root;
}
2.DFS(PNode root, int depth)

1119 Pre- and Post-order Traversals
给定先序和后序，判断中序及是否唯一  秒极！！
void Traversal(int prel, int prer, int postl, int postr)
{
	if (prel == prer) {//该子树只有一个结点了
		in.push_back(pre[prel]);
		return;
	}
	if (pre[prel] == post[postr]) {//找到左右子树
		int i = prel + 1;//遍历preorder找到右子树（存在）的根结点
		while (i <= prer && pre[i] != post[postr - 1])
			i++;
		//左子树长度i-prel-1
		if (i - prel > 1) {//代表根和右子树之间至少隔了一个结点，也就是有左子树
			Traversal(prel + 1, i - 1, postl, postl + (i - prel - 1) - 1);
		}
		else//假设左子树为空，考虑只有右子树的情况
			unique = false;
		in.push_back(post[postr]);//根
		Traversal(i, prer, postl + (i - prel - 1), postr - 1);
	}
}
